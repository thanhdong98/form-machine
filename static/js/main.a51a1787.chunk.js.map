{"version":3,"sources":["shared/types/FormControlType.ts","shared/types/FormFieldType.ts","shared/hooks/useBreakpoint.ts","shared/icons/DownArrow.tsx","shared/icons/Plus.tsx","shared/icons/UpArrow.tsx","shared/icons/Trash.tsx","shared/icons/Download.tsx","shared/icons/Save.tsx","shared/types/FormBuilderContext.ts","components/Tooltip/Tooltip.tsx","components/ActionPopover/ActionPopover.tsx","components/AddControlButton/AddControlButton.tsx","components/FormControlParser/Checboxs.tsx","components/FormControlParser/FormControlParser.tsx","shared/constants/ControlDefaultValue.ts","shared/constants/ValidFormFields.ts","containers/Toolbox/ToolboxItem.tsx","containers/Toolbox/ToolboxList.tsx","components/FormFieldEditor/FormValueFieldEditor.tsx","components/FormFieldEditor/FormFieldEditor.tsx","shared/utils/getFormValue.ts","shared/utils/parseTemplate.ts","containers/FormGenerator/FormGenerator.tsx","containers/Toolbox/Toolbox.tsx","containers/FormBuilder/FormBuilder.tsx","samples/FormGeneratorSample.tsx","samples/Sample.tsx","index.tsx"],"names":["ControlType","InputFieldType","FormFieldType","getDeviceConfig","width","useBreakpoint","useState","window","innerWidth","brkPnt","setBrkPnt","useEffect","calcInnerWidth","throttle","addEventListener","removeEventListener","DownArrow","height","x","y","viewBox","enableBackground","d","Plus","fill","UpArrow","Trash","Download","Save","FormBuilderContext","createContext","schema","setSchema","onSave","Tooltip","children","placement","text","OverlayTrigger","delay","show","hide","overlay","ActionPopover","onAdd","onDelete","onMove","showAdd","toggleShowAdd","breakpoint","rows","sm","md","lg","className","style","Row","Object","values","map","control","Col","Button","onClick","variant","AddControlButton","showControls","toggleShowControl","as","onMouseLeave","Checkboxs","id","defaultValue","disabled","value","setValue","Form","Control","type","name","val","index","Check","inline","defaultChecked","includes","label","onChange","e","checked","filter","onChecke","target","FormControlParser","formControlItem","rest","component","useMemo","controlType","placeholder","columns","bordered","Checkbox","Radio","TextArea","toString","Select","opt","Input","Card","Header","Body","item","xs","Section","Group","Label","ControlDefaultValue","ValidFormFields","ToolboxItem","formItem","addFormItem","deleteFormItem","editFormItem","showAction","toggleShowAction","Accordion","Item","eventKey","onMouseEnter","isUp","ToolboxList","editSchema","afterId","afterIndex","findIndex","splice","v4","editingFormItem","itemIndex","swappedIndex","tempItem","length","flush","FormValueFields","onChangeField","i","onDeleteField","size","FormFieldEditor","useCallback","FormFieldLabels","FormFieldInputs","FormValueFieldEditor","field","formField","getFormLabel","list","res","parseTemplate","templateStr","formSchema","JSON","parse","err","console","log","FormGenerator","onSubmit","onSubmitForm","preventDefault","formData","FormData","formResult","formValue","entries","question","answer","getFormValue","fromEntries","Toolbox","useContext","element","document","createElement","textFile","Blob","stringify","href","URL","createObjectURL","download","body","appendChild","click","FormBuilder","setFormSchema","Provider","FormGeneratorSample","fileInput","display","onchange","file","files","reader","FileReader","onload","event","contents","result","alert","removeChild","readAsText","r","join","Sample","isFormBuilder","toggleShowFormBuilder","data","datetime","date","time","password","number","Container","template","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a51a1787.chunk.js","sourcesContent":["export enum ControlType {\r\n  Input = \"Input\",\r\n  Checkbox = \"Checkbox\",\r\n  Radio = \"Radio\",\r\n  Select = \"Select\",\r\n  TextArea = \"TextArea\",\r\n  Section = \"Section\"\r\n}\r\n\r\nexport enum InputFieldType {\r\n  number = \"number\",\r\n  text = \"text\",\r\n  password = \"password\",\r\n  time = \"time\",\r\n  date = \"date\",\r\n  datetime = \"datetime-local\"\r\n}\r\n\r\nexport interface FormControlType {\r\n  id?: string;\r\n  controlType: ControlType;\r\n  label?: string;\r\n  value?: string | boolean | number | string[];\r\n  placeholder?: string;\r\n  defaultValue?: string | number | string[];\r\n  values?: string[];\r\n  disabled?: boolean;\r\n  type?: InputFieldType;\r\n  columns?: 1 | 2 | 3 | 4 | 6;\r\n  children?: FormControlType[];\r\n  bordered?: boolean;\r\n}\r\n","export enum FormFieldType {\r\n  controlType = \"controlType\",\r\n  label = \"label\",\r\n  value = \"value\",\r\n  placeholder = \"placeholder\",\r\n  defaultValue = \"defaultValue\",\r\n  values = \"values\",\r\n  disabled = \"disabled\",\r\n  type = \"type\",\r\n  columns = \"columns\",\r\n  children = \"children\",\r\n  bordered = \"bordered\"\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport throttle from \"lodash.throttle\";\r\n\r\nconst getDeviceConfig = (width: number): \"sm\" | \"md\" | \"lg\" => {\r\n  if (width < 720) {\r\n    return \"sm\";\r\n  } else if (width < 1024) {\r\n    return \"md\";\r\n  } else {\r\n    return \"lg\";\r\n  }\r\n};\r\n\r\nexport const useBreakpoint = (): \"sm\" | \"md\" | \"lg\" => {\r\n  const [brkPnt, setBrkPnt] = useState(() => getDeviceConfig(window.innerWidth));\r\n\r\n  useEffect(() => {\r\n    const calcInnerWidth = throttle(function () {\r\n      setBrkPnt(getDeviceConfig(window.innerWidth));\r\n    }, 200);\r\n    window.addEventListener(\"resize\", calcInnerWidth);\r\n    return () => window.removeEventListener(\"resize\", calcInnerWidth);\r\n  }, []);\r\n\r\n  return brkPnt;\r\n};\r\n","import { FC } from \"react\";\r\n\r\nconst DownArrow: FC<{ width?: string | number; height?: string | number }> = ({ width, height }) => (\r\n  <svg\r\n    width={width}\r\n    height={height}\r\n    x=\"0px\"\r\n    y=\"0px\"\r\n    viewBox=\"0 0 123.97 123.97\"\r\n    enableBackground=\"new 0 0 123.97 123.97\"\r\n  >\r\n    <g>\r\n      <path d=\"M51.802,96.062c2.801,2.801,6.5,4.2,10.2,4.2s7.4-1.399,10.2-4.2l47.3-47.3c5.5-5.5,6.101-14.6,0.8-20.3c-5.6-6.1-15.1-6.3-20.899-0.5l-30.4,30.3c-3.899,3.9-10.2,3.9-14.1,0l-30.3-30.3c-5.801-5.8-15.301-5.7-20.9,0.5c-5.3,5.7-4.8,14.8,0.8,20.3L51.802,96.062z\" />\r\n    </g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n  </svg>\r\n);\r\n\r\nexport default DownArrow;\r\n","import { FC } from \"react\";\r\n\r\nconst Plus: FC<{ width?: string | number; height?: string | number; fill?: string }> = ({\r\n  width,\r\n  height,\r\n  fill = \"white\"\r\n}) => (\r\n  <svg height={height} viewBox=\"0 0 448 448\" width={width} fill={fill}>\r\n    <path d=\"m408 184h-136c-4.417969 0-8-3.582031-8-8v-136c0-22.089844-17.910156-40-40-40s-40 17.910156-40 40v136c0 4.417969-3.582031 8-8 8h-136c-22.089844 0-40 17.910156-40 40s17.910156 40 40 40h136c4.417969 0 8 3.582031 8 8v136c0 22.089844 17.910156 40 40 40s40-17.910156 40-40v-136c0-4.417969 3.582031-8 8-8h136c22.089844 0 40-17.910156 40-40s-17.910156-40-40-40zm0 0\" />\r\n  </svg>\r\n);\r\n\r\nexport default Plus;\r\n","import { FC } from \"react\";\r\n\r\nconst UpArrow: FC<{ width?: string | number; height?: string | number }> = ({ width, height }) => (\r\n  <svg\r\n    width={width}\r\n    height={height}\r\n    x=\"0px\"\r\n    y=\"0px\"\r\n    viewBox=\"0 0 123.969 123.97\"\r\n    enableBackground=\"new 0 0 123.969 123.97\"\r\n  >\r\n    <g>\r\n      <path d=\"M120.266,95.584c5.301-5.801,4.801-14.801-0.8-20.301l-47.3-47.4c-2.8-2.8-6.5-4.2-10.2-4.2s-7.399,1.4-10.2,4.2l-47.299,47.3c-5.5,5.5-6.1,14.6-0.8,20.3c5.6,6.101,15.099,6.3,20.9,0.5l30.3-30.3c3.899-3.9,10.2-3.9,14.1,0l30.3,30.3C105.167,101.883,114.667,101.684,120.266,95.584z\" />\r\n    </g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n  </svg>\r\n);\r\n\r\nexport default UpArrow;\r\n","import { FC } from \"react\";\r\n\r\nconst Trash: FC<{ width?: string | number; height?: string | number; fill?: string }> = ({\r\n  width,\r\n  height,\r\n  fill = \"white\"\r\n}) => (\r\n  <svg enableBackground=\"new 0 0 512 512\" height={height} viewBox=\"0 0 512 512\" width={width} fill={fill}>\r\n    <g>\r\n      <path d=\"m424 64h-88v-16c0-26.51-21.49-48-48-48h-64c-26.51 0-48 21.49-48 48v16h-88c-22.091 0-40 17.909-40 40v32c0 8.837 7.163 16 16 16h384c8.837 0 16-7.163 16-16v-32c0-22.091-17.909-40-40-40zm-216-16c0-8.82 7.18-16 16-16h64c8.82 0 16 7.18 16 16v16h-96z\" />\r\n      <path d=\"m78.364 184c-2.855 0-5.13 2.386-4.994 5.238l13.2 277.042c1.22 25.64 22.28 45.72 47.94 45.72h242.98c25.66 0 46.72-20.08 47.94-45.72l13.2-277.042c.136-2.852-2.139-5.238-4.994-5.238zm241.636 40c0-8.84 7.16-16 16-16s16 7.16 16 16v208c0 8.84-7.16 16-16 16s-16-7.16-16-16zm-80 0c0-8.84 7.16-16 16-16s16 7.16 16 16v208c0 8.84-7.16 16-16 16s-16-7.16-16-16zm-80 0c0-8.84 7.16-16 16-16s16 7.16 16 16v208c0 8.84-7.16 16-16 16s-16-7.16-16-16z\" />\r\n    </g>\r\n  </svg>\r\n);\r\n\r\nexport default Trash;\r\n","import { FC } from \"react\";\r\n\r\nconst Download: FC<{ width?: string | number; height?: string | number; fill?: string }> = ({\r\n  width,\r\n  height,\r\n  fill = \"white\"\r\n}) => (\r\n  <svg height={height} width={width} fill={fill} enableBackground=\"new 0 0 24 24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"m12 16c-.205 0-.401-.084-.542-.232l-5.25-5.5c-.455-.476-.117-1.268.542-1.268h2.75v-5.75c0-.689.561-1.25 1.25-1.25h2.5c.689 0 1.25.561 1.25 1.25v5.75h2.75c.659 0 .997.792.542 1.268l-5.25 5.5c-.141.148-.337.232-.542.232z\" />\r\n    <path d=\"m22.25 22h-20.5c-.965 0-1.75-.785-1.75-1.75v-.5c0-.965.785-1.75 1.75-1.75h20.5c.965 0 1.75.785 1.75 1.75v.5c0 .965-.785 1.75-1.75 1.75z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Download;\r\n","import { FC } from \"react\";\r\n\r\nconst Save: FC<{ width?: string | number; height?: string | number }> = ({ width, height }) => (\r\n  <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 512 512\" enableBackground=\"new 0 0 512 512\" width={width} height={height}>\r\n    <g>\r\n      <path d=\"M493.254,77.255l-58.508-58.51C422.742,6.742,406.465,0,389.49,0H352v112c0,8.836-7.164,16-16,16H80c-8.836,0-16-7.164-16-16V0H32C14.328,0,0,14.326,0,32v448c0,17.673,14.328,32,32,32h448c17.672,0,32-14.327,32-32V122.51C512,105.535,505.258,89.257,493.254,77.255z M448,448H64V256h384V448z\" />\r\n      <rect x=\"224\" width=\"64\" height=\"96\" />\r\n    </g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n    <g></g>\r\n  </svg>\r\n);\r\n\r\nexport default Save;\r\n","import { createContext } from \"react\";\r\nimport { FormControlType } from \"./FormControlType\";\r\n\r\nexport interface FormBuilderContextType {\r\n  schema: FormControlType[];\r\n  setSchema: (schema: FormControlType[]) => void;\r\n  onSave?: () => void;\r\n};\r\n\r\nexport const FormBuilderContext = createContext<FormBuilderContextType>({\r\n  schema: [],\r\n  setSchema: (schema: FormControlType[]) => {},\r\n  onSave: () => {}\r\n});\r\n\r\nexport default FormBuilderContext;\r\n","import { FC, ReactElement } from \"react\";\r\nimport { OverlayTrigger, Tooltip as BootstrapTooltip } from \"react-bootstrap\";\r\nimport { Placement } from \"react-bootstrap/esm/types\";\r\n\r\nconst Tooltip: FC<{ children: ReactElement; placement?: Placement; text: string }> = ({\r\n  children,\r\n  placement = \"top\",\r\n  text\r\n}) => {\r\n  return (\r\n    <OverlayTrigger\r\n      placement={placement}\r\n      delay={{ show: 500, hide: 500 }}\r\n      overlay={<BootstrapTooltip>{text}</BootstrapTooltip>}\r\n    >\r\n      {children}\r\n    </OverlayTrigger>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n","import { FC, useEffect, useState } from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport { useBreakpoint } from \"../../shared/hooks\";\r\nimport { DownArrow, Plus, Trash, UpArrow } from \"../../shared/icons\";\r\nimport { ControlType } from \"../../shared/types\";\r\nimport Tooltip from \"../Tooltip\";\r\n\r\nconst ActionPopover: FC<{\r\n  show: boolean;\r\n  onAdd: (element: ControlType) => void;\r\n  onDelete: () => void;\r\n  onMove: (isUp?: boolean) => void;\r\n}> = ({ show = false, onAdd, onDelete, onMove }) => {\r\n  const [showAdd, toggleShowAdd] = useState(false);\r\n  const breakpoint = useBreakpoint();\r\n\r\n  useEffect(() => {\r\n    if (!show) {\r\n      toggleShowAdd(false);\r\n    }\r\n  }, [show]);\r\n\r\n  const rows: Record<string, number> = {\r\n    sm: 6,\r\n    md: 3,\r\n    lg: 2\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"position-absolute d-flex flex-wrap justify-content-start overflow-hidden bg-white controls-popover\"\r\n      style={{\r\n        height: show ? (showAdd ? rows[breakpoint] * 40 : 50) : 0\r\n      }}\r\n    >\r\n      {showAdd ? (\r\n        <Row className=\"m-0\">\r\n          {Object.values(ControlType).map((control: ControlType) => (\r\n            <Col\r\n              key={`action-${control}`}\r\n              className=\"p-0\"\r\n              md={6}\r\n              lg={4}\r\n              style={{ height: `${100 / rows[breakpoint]}` }}\r\n            >\r\n              <Button onClick={() => onAdd(control)} className=\"w-100 h-100\" variant=\"outline-primary\">\r\n                {control}\r\n              </Button>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      ) : (\r\n        <>\r\n          <Tooltip text=\"Add item\">\r\n            <Button variant=\"success\" className=\"h-100\" onClick={() => toggleShowAdd(true)}>\r\n              <Plus height={25} />\r\n            </Button>\r\n          </Tooltip>\r\n          <Tooltip text=\"Move up\">\r\n            <Button variant=\"outline-info\" className=\"h-100\" onClick={() => onMove(true)}>\r\n              <UpArrow height={25} />\r\n            </Button>\r\n          </Tooltip>\r\n          <Tooltip text=\"Move down\">\r\n            <Button variant=\"outline-info\" className=\"h-100\" onClick={() => onMove()}>\r\n              <DownArrow height={25} />\r\n            </Button>\r\n          </Tooltip>\r\n          <Tooltip text=\"Delete item\">\r\n            <Button variant=\"danger\" className=\"h-100\" onClick={onDelete}>\r\n              <Trash height={25} />\r\n            </Button>\r\n          </Tooltip>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActionPopover;\r\n","import { FC, ReactNode, useState } from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport { useBreakpoint } from \"../../shared/hooks\";\r\nimport { ControlType } from \"../../shared/types\";\r\n\r\nconst AddControlButton: FC<{ onAdd: (controlType: ControlType) => void; children: ReactNode }> = ({\r\n  onAdd,\r\n  children\r\n}) => {\r\n  const [showControls, toggleShowControl] = useState(false);\r\n  const breakpoint = useBreakpoint();\r\n\r\n  const rows: Record<string, number> = {\r\n    sm: 6,\r\n    md: 3,\r\n    lg: 2\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      as=\"div\"\r\n      variant=\"success\"\r\n      className=\"w-100 position-relative\"\r\n      onClick={() => toggleShowControl(true)}\r\n      onMouseLeave={() => toggleShowControl(false)}\r\n    >\r\n      {showControls && (\r\n        <div\r\n          className=\"position-absolute d-flex flex-wrap justify-content-start overflow-hidden bg-white controls-popover\"\r\n          style={{\r\n            height: rows[breakpoint] * 40\r\n          }}\r\n        >\r\n          <Row className=\"m-0\">\r\n            {Object.values(ControlType).map((control: ControlType) => (\r\n              <Col\r\n                key={`action-${control}`}\r\n                className=\"p-0\"\r\n                md={6}\r\n                lg={4}\r\n                style={{ height: `${100 / rows[breakpoint]}` }}\r\n              >\r\n                <Button onClick={() => onAdd(control)} className=\"w-100 h-100 btn-item-control\" variant=\"outline-primary\">\r\n                  {control}\r\n                </Button>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </div>\r\n      )}\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default AddControlButton;\r\n","import { FC, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nconst Checkboxs: FC<{ id?: string; defaultValue: string[]; disabled?: boolean; values: string[] }> = ({\r\n  id = \"\",\r\n  defaultValue,\r\n  disabled = false,\r\n  values = []\r\n}) => {\r\n  const [value, setValue] = useState<string[]>(defaultValue);\r\n\r\n  const onChecke = (checked: boolean, val: string) => {\r\n    if (checked) {\r\n      setValue([...value, val]);\r\n    } else {\r\n      setValue(value.filter((x) => x !== val));\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Form.Control type=\"hidden\" name={id} value={value} />\r\n      {values.map((val: string, index: number) => (\r\n        <Form.Check\r\n          id={`checkbox-${id}-${val}`}\r\n          type=\"checkbox\"\r\n          key={`${id}-${val}-${index}`}\r\n          value={val}\r\n          inline\r\n          disabled={disabled}\r\n          defaultChecked={defaultValue.includes(val)}\r\n          label={val}\r\n          onChange={(e: any) => onChecke(e.target.checked, val)}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Checkboxs;\r\n","import { FC, useMemo } from \"react\";\r\nimport { Card, Col, Form, Row } from \"react-bootstrap\";\r\nimport { ControlType, FormControlType } from \"../../shared/types\";\r\nimport Checkboxs from \"./Checboxs\";\r\n\r\nconst FormControlParser: FC<{ formControlItem: FormControlType }> = ({ formControlItem }) => {\r\n  const { label = \"\", ...rest } = formControlItem;\r\n\r\n  const component: JSX.Element = useMemo(() => {\r\n    const {\r\n      controlType,\r\n      defaultValue,\r\n      placeholder,\r\n      type,\r\n      // value,\r\n      disabled,\r\n      values = [],\r\n      id,\r\n      children = [],\r\n      columns = 1,\r\n      bordered = false\r\n    } = rest;\r\n    switch (controlType) {\r\n      case ControlType.Checkbox:\r\n        return (\r\n          <Checkboxs id={id} defaultValue={(defaultValue || []) as string[]} disabled={disabled} values={values} />\r\n        );\r\n      case ControlType.Radio:\r\n        return (\r\n          <>\r\n            {values.map((val: string, index: number) => (\r\n              <Form.Check\r\n                id={`radio-${id}-${val}`}\r\n                defaultChecked={val === defaultValue}\r\n                type=\"radio\"\r\n                key={`${id}-${val}-${index}`}\r\n                value={val}\r\n                inline\r\n                name={id}\r\n                label={val}\r\n                disabled={disabled}\r\n              />\r\n            ))}\r\n          </>\r\n        );\r\n      case ControlType.TextArea:\r\n        return (\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={4}\r\n            placeholder={placeholder}\r\n            defaultValue={(defaultValue || \"\").toString()}\r\n            name={id}\r\n            disabled={disabled}\r\n          />\r\n        );\r\n      case ControlType.Select:\r\n        return (\r\n          <Form.Select defaultValue={(defaultValue || \"\").toString()} name={id} disabled={disabled}>\r\n            {values.map((opt: string, index: number) => (\r\n              <option key={`${id}-${opt}-${index}`} value={opt}>\r\n                {opt}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        );\r\n      case ControlType.Input:\r\n        return (\r\n          <Form.Control\r\n            disabled={disabled}\r\n            type={type?.toString()}\r\n            defaultValue={(defaultValue || \"\").toString()}\r\n            placeholder={placeholder}\r\n            name={id}\r\n          />\r\n        );\r\n      default:\r\n        return bordered ? (\r\n          <Card className=\"mb-3\">\r\n            {label && <Card.Header>{label}</Card.Header>}\r\n            <Card.Body>\r\n              <Row>\r\n                {children.map((item: FormControlType) => (\r\n                  <Col key={`${id}-${item.id}`} xs={12 / columns}>\r\n                    <FormControlParser formControlItem={item} />\r\n                  </Col>\r\n                ))}\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        ) : (\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <h2>{label}</h2>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              {children.map((item: FormControlType) => (\r\n                <Col key={`${id}-${item.id}`} xs={12 / columns}>\r\n                  <FormControlParser formControlItem={item} />\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          </>\r\n        );\r\n    }\r\n  }, [rest, label]);\r\n\r\n  return formControlItem.controlType === ControlType.Section ? (\r\n    component\r\n  ) : (\r\n    <Form.Group as={Col} className=\"mb-4\">\r\n      {label && <Form.Label>{formControlItem.label}</Form.Label>}\r\n      <div> {component} </div>\r\n    </Form.Group>\r\n  );\r\n};\r\nexport default FormControlParser;\r\n","import { ControlType, FormControlType } from \"../types\";\r\n\r\nconst CheckboxDefaultValue: FormControlType = {\r\n  controlType: ControlType.Checkbox,\r\n  defaultValue: [],\r\n  values: [],\r\n  disabled: false,\r\n  label: \"\"\r\n};\r\n\r\nconst RadioDefaultValue: FormControlType = {\r\n  controlType: ControlType.Radio,\r\n  values: [],\r\n  disabled: false,\r\n  label: \"\"\r\n};\r\n\r\nconst InputDefaultValue: FormControlType = {\r\n  controlType: ControlType.Input,\r\n  defaultValue: \"\",\r\n  disabled: false,\r\n  label: \"\",\r\n  placeholder: \"\"\r\n};\r\n\r\nconst TextAreaDefaultValue: FormControlType = {\r\n  controlType: ControlType.TextArea,\r\n  value: \"\",\r\n  values: [],\r\n  disabled: false,\r\n  label: \"\"\r\n};\r\n\r\nconst SelectDefaultValue: FormControlType = {\r\n  controlType: ControlType.Select,\r\n  values: [],\r\n  disabled: false,\r\n  label: \"\"\r\n};\r\n\r\nconst SectionDefaultValue: FormControlType = {\r\n  controlType: ControlType.Section,\r\n  children: [],\r\n  label: \"\",\r\n  bordered: false\r\n};\r\n\r\nexport const ControlDefaultValue: Record<ControlType, FormControlType> = {\r\n  Checkbox: CheckboxDefaultValue,\r\n  Radio: RadioDefaultValue,\r\n  Input: InputDefaultValue,\r\n  TextArea: TextAreaDefaultValue,\r\n  Select: SelectDefaultValue,\r\n  Section: SectionDefaultValue\r\n};\r\n","import { ControlType, FormFieldType } from \"../types\";\r\n\r\nexport const ValidFormFields: Record<ControlType, FormFieldType[]> = {\r\n  Input: [\r\n    FormFieldType.controlType,\r\n    FormFieldType.type,\r\n    FormFieldType.label,\r\n    FormFieldType.placeholder,\r\n    FormFieldType.defaultValue,\r\n    FormFieldType.disabled\r\n  ],\r\n  Checkbox: [\r\n    FormFieldType.controlType,\r\n    FormFieldType.label,\r\n    FormFieldType.defaultValue,\r\n    FormFieldType.values,\r\n    FormFieldType.disabled\r\n  ],\r\n  Radio: [\r\n    FormFieldType.controlType,\r\n    FormFieldType.label,\r\n    FormFieldType.defaultValue,\r\n    FormFieldType.values,\r\n    FormFieldType.disabled\r\n  ],\r\n  Select: [\r\n    FormFieldType.controlType,\r\n    FormFieldType.label,\r\n    FormFieldType.defaultValue,\r\n    FormFieldType.values,\r\n    FormFieldType.disabled\r\n  ],\r\n  TextArea: [FormFieldType.controlType, FormFieldType.label, FormFieldType.defaultValue, FormFieldType.disabled],\r\n  Section: [FormFieldType.label, FormFieldType.columns, FormFieldType.bordered, FormFieldType.children]\r\n};\r\n","import { FC, useState } from \"react\";\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport { ActionPopover, FormFieldEditor } from \"../../components\";\r\nimport { ControlType, FormControlType } from \"../../shared/types\";\r\n\r\nconst ToolboxItem: FC<{\r\n  formItem: FormControlType;\r\n  addFormItem: (item: ControlType, afterId?: string) => void;\r\n  deleteFormItem: (id: string) => void;\r\n  editFormItem: (item: FormControlType) => void;\r\n  onMove: (id: string, isUp?: boolean) => void;\r\n}> = ({ formItem, addFormItem, deleteFormItem, editFormItem, onMove }) => {\r\n  const [showAction, toggleShowAction] = useState(false);\r\n\r\n  return (\r\n    <Accordion.Item\r\n      eventKey={formItem.id || \"\"}\r\n      key={formItem.id}\r\n      className=\"position-relative\"\r\n      onMouseEnter={() => {\r\n        toggleShowAction(true);\r\n      }}\r\n      onMouseLeave={() => toggleShowAction(false)}\r\n    >\r\n      <ActionPopover\r\n        show={showAction}\r\n        onAdd={(control: ControlType) => {\r\n          addFormItem(control, formItem.id);\r\n          toggleShowAction(false);\r\n        }}\r\n        onDelete={() => {\r\n          deleteFormItem(formItem?.id || \"\");\r\n          toggleShowAction(false);\r\n        }}\r\n        onMove={(isUp?: boolean) => {\r\n          onMove(formItem?.id || \"\", isUp);\r\n          toggleShowAction(false);\r\n        }}\r\n      />\r\n      <Accordion.Header>\r\n        {formItem?.controlType} : {formItem?.label}\r\n      </Accordion.Header>\r\n      <Accordion.Body>\r\n        <FormFieldEditor formControlItem={formItem} editFormItem={editFormItem} />\r\n      </Accordion.Body>\r\n    </Accordion.Item>\r\n  );\r\n};\r\n\r\nexport default ToolboxItem;\r\n","import { FC } from \"react\";\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport { v4 } from \"uuid\";\r\nimport { AddControlButton } from \"../../components\";\r\nimport { ControlDefaultValue } from \"../../shared/constants\";\r\nimport { ControlType, FormControlType } from \"../../shared/types\";\r\nimport ToolboxItem from \"./ToolboxItem\";\r\n\r\nconst ToolboxList: FC<{\r\n  schema: FormControlType[];\r\n  editSchema: (schema: FormControlType[]) => void;\r\n}> = ({ schema = [], editSchema }) => {\r\n  const addFormItem = (type: ControlType, afterId = \"\") => {\r\n    if (afterId) {\r\n      const afterIndex = schema.findIndex((formItem: FormControlType) => formItem.id === afterId);\r\n      schema.splice(afterIndex + 1, 0, { ...ControlDefaultValue[type], id: v4() });\r\n      editSchema([...schema]);\r\n    } else editSchema([...schema, { ...ControlDefaultValue[type], id: v4() }]);\r\n  };\r\n\r\n  const deleteFormItem = (id: string) => editSchema(schema.filter((item: FormControlType) => item.id !== id));\r\n\r\n  const editFormItem = (editingFormItem: FormControlType) => {\r\n    if (editingFormItem) {\r\n      const itemIndex = schema.findIndex((item) => item.id === editingFormItem.id);\r\n      schema[itemIndex] = editingFormItem;\r\n\r\n      editSchema([...schema]);\r\n    }\r\n  };\r\n\r\n  const onMove = (id: string, isUp?: boolean) => {\r\n    const index = schema.findIndex((item) => item.id === id);\r\n    const swappedIndex = isUp ? index - 1 : index + 1;\r\n\r\n    const tempItem = schema[swappedIndex];\r\n\r\n    if (tempItem) {\r\n      schema[swappedIndex] = schema[index];\r\n      schema[index] = tempItem;\r\n      editSchema([...schema]);\r\n    }\r\n  };\r\n\r\n  return schema.length ? (\r\n    <Accordion flush={false} className=\"mb-2\">\r\n      {schema.map((formItem: FormControlType) => (\r\n        <ToolboxItem\r\n          key={`toolbox-${formItem.id}`}\r\n          addFormItem={addFormItem}\r\n          deleteFormItem={deleteFormItem}\r\n          editFormItem={editFormItem}\r\n          formItem={formItem}\r\n          onMove={onMove}\r\n        />\r\n      ))}\r\n    </Accordion>\r\n  ) : (\r\n    <AddControlButton onAdd={addFormItem}> Add Item </AddControlButton>\r\n  );\r\n};\r\n\r\nexport default ToolboxList;\r\n","import { FC } from \"react\";\r\nimport { Col, Form, Row, Button } from \"react-bootstrap\";\r\nimport { Trash } from \"../../shared/icons\";\r\n\r\nconst FormValueFields: FC<{ values?: string[]; onChange: (value: string[]) => void }> = ({ values = [], onChange }) => {\r\n  const onChangeField = (e: any, i: number) => {\r\n    values[i] = e.target.value;\r\n    onChange([...values]);\r\n  };\r\n\r\n  const onAddField = () => {\r\n    onChange([...values, \"\"]);\r\n  };\r\n\r\n  const onDeleteField = (index: number) => {\r\n    values.splice(index, 1);\r\n    onChange([...values]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {values.map((val: string, index: number) => (\r\n        <Row className=\"mb-2\" key={`val-${index}`}>\r\n          <Col xs={9} md={8} lg={9}>\r\n            <Form.Control type=\"text\" value={val} onChange={(e) => onChangeField(e, index)} name=\"defaultValue\" />\r\n          </Col>\r\n          <Col xs={3} md={4} lg={3}>\r\n            <Button className=\"w-100 h-100\" variant=\"danger\" onClick={() => onDeleteField(index)} size=\"sm\">\r\n              <Trash height={20} />\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      ))}\r\n      <Row>\r\n        <Col xs={12} onClick={onAddField}>\r\n          <Button variant=\"success\" className=\"w-100\" size=\"lg\">\r\n            Add Value\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormValueFields;\r\n","import { FC, ReactElement, useCallback, useMemo } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport ToolboxList from \"../../containers/Toolbox/ToolboxList\";\r\nimport { ValidFormFields } from \"../../shared/constants\";\r\nimport { ControlType, FormControlType, FormFieldType, InputFieldType } from \"../../shared/types\";\r\nimport FormValueFieldEditor from \"./FormValueFieldEditor\";\r\n\r\nconst FormFieldEditor: FC<{ formControlItem: FormControlType; editFormItem: (formItem: FormControlType) => void }> = ({\r\n  formControlItem,\r\n  editFormItem\r\n}) => {\r\n  const onChange = useCallback(\r\n    (e: any) => {\r\n      editFormItem({\r\n        ...formControlItem,\r\n        [e.target.name]: [\"disabled\", \"bordered\"].includes(e.target.name) ? e.target.checked : e.target.value\r\n      });\r\n    },\r\n    [formControlItem, editFormItem]\r\n  );\r\n\r\n  const FormFieldLabels: Record<FormFieldType, string> = {\r\n    disabled: \"Disable\",\r\n    controlType: \"Element Type\",\r\n    label: \"Title\",\r\n    placeholder: \"Placholder\",\r\n    defaultValue: \"Default Value(s)\",\r\n    values: \"Values\",\r\n    value: \"Value\",\r\n    type: \"Type\",\r\n    columns: \"Columns\",\r\n    children: \"Control Items\",\r\n    bordered: \"Contain Border\"\r\n  };\r\n\r\n  const FormFieldInputs: Record<FormFieldType, ReactElement> = useMemo(\r\n    () => ({\r\n      disabled: (\r\n        <Form.Check\r\n          label=\"Disabled\"\r\n          defaultChecked={formControlItem.disabled}\r\n          name=\"disabled\"\r\n          id={`disabledField-${formControlItem.id}`}\r\n          onChange={onChange}\r\n        />\r\n      ),\r\n      controlType: (\r\n        <Form.Select defaultValue={formControlItem.controlType} onChange={onChange} name=\"controlType\">\r\n          {Object.values(ControlType).map((item: ControlType) => (\r\n            <option value={item} key={`controlType-${formControlItem.id}-${item}`}>\r\n              {item.toString()}\r\n            </option>\r\n          ))}\r\n        </Form.Select>\r\n      ),\r\n      label: (\r\n        <Form.Control type=\"text\" placeholder=\"Title\" value={formControlItem.label} onChange={onChange} name=\"label\" />\r\n      ),\r\n      placeholder: (\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"placeholder\"\r\n          value={formControlItem.placeholder}\r\n          onChange={onChange}\r\n          name=\"placeholder\"\r\n        />\r\n      ),\r\n      defaultValue: (\r\n        <Form.Control\r\n          type={formControlItem.controlType === ControlType.Input ? formControlItem.type : \"text\"}\r\n          placeholder=\"Default Value\"\r\n          value={formControlItem.defaultValue}\r\n          onChange={onChange}\r\n          name=\"defaultValue\"\r\n        />\r\n      ),\r\n      values: (\r\n        <FormValueFieldEditor\r\n          values={formControlItem.values}\r\n          onChange={(values: string[]) =>\r\n            editFormItem({\r\n              ...formControlItem,\r\n              values: values\r\n            })\r\n          }\r\n        />\r\n      ),\r\n      type: (\r\n        <Form.Select onChange={onChange} value={formControlItem.type} name=\"type\">\r\n          {Object.values(InputFieldType).map((field: string) => (\r\n            <option key={`type-${formControlItem.id}-${field}`} value={field}>\r\n              {field}\r\n            </option>\r\n          ))}\r\n        </Form.Select>\r\n      ),\r\n      value: <div>not implement yet</div>,\r\n      children: (\r\n        <ToolboxList\r\n          schema={formControlItem.children || []}\r\n          editSchema={(schema: FormControlType[]) => editFormItem({ ...formControlItem, children: [...schema] })}\r\n        />\r\n      ),\r\n      columns: (\r\n        <Form.Select size=\"sm\" onChange={onChange} value={formControlItem.columns} name=\"columns\">\r\n          {[1, 2, 3, 4, 6].map((val) => (\r\n            <option key={`columns-${formControlItem.id}-${val}`} value={val}>\r\n              {val}\r\n            </option>\r\n          ))}\r\n        </Form.Select>\r\n      ),\r\n      bordered: (\r\n        <Form.Check\r\n          label=\"Bordered\"\r\n          defaultChecked={formControlItem.bordered}\r\n          name=\"bordered\"\r\n          id={`borderedField-${formControlItem.id}`}\r\n          onChange={onChange}\r\n        />\r\n      )\r\n    }),\r\n    [formControlItem, onChange, editFormItem]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {ValidFormFields[formControlItem.controlType].map((formField: FormFieldType) => (\r\n        <Form.Group key={`group-${formControlItem.id}-${formField}`} className=\"mb-2\">\r\n          <Form.Label>{FormFieldLabels[formField]}</Form.Label>\r\n          {FormFieldInputs[formField]}\r\n        </Form.Group>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormFieldEditor;\r\n","import { FormControlType } from \"../types\";\r\nimport { SubmittedValueType } from \"../types\";\r\n\r\nexport const getFormLabel = (id: string, list: FormControlType[]): string => {\r\n  let res: string | undefined;\r\n\r\n  for (const item of list) {\r\n    if (item.id === id) {\r\n      res = item.label;\r\n      break;\r\n    } else if (item.children?.length) {\r\n      res = getFormLabel(id, item.children);\r\n      if (res) break;\r\n    }\r\n  }\r\n\r\n  return res || \"\";\r\n};\r\n\r\nexport const getFormValue = (formValue: object, schema: FormControlType[]): SubmittedValueType[] => {\r\n  return Object.entries(formValue).map((entries: string[]) => ({\r\n    question: getFormLabel(entries[0], schema),\r\n    answer: entries[1]\r\n  }));\r\n};\r\n","import { FormControlType } from \"../types\";\r\n\r\nexport const parseTemplate = (templateStr = \"\"): FormControlType[] => {\r\n  try {\r\n    const formSchema = JSON.parse(templateStr) as FormControlType[];\r\n    return formSchema;\r\n  } catch (err: any) {\r\n    console.log(\"Cannot convert template with error: \", err);\r\n  }\r\n\r\n  return [];\r\n};\r\n","import { FC, useCallback } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport { FormControlParser } from \"../../components\";\r\nimport { FormControlType, SubmittedValueType } from \"../../shared/types\";\r\nimport { getFormValue } from \"../../shared/utils\";\r\n\r\nconst FormGenerator: FC<{\r\n  schema: FormControlType[];\r\n  onSubmit?: (result: SubmittedValueType[]) => void;\r\n  className?: string;\r\n}> = ({ schema = [], onSubmit, className = \"\" }) => {\r\n  const onSubmitForm = useCallback(\r\n    (e: any) => {\r\n      e.preventDefault();\r\n      const formData = new FormData(e.target),\r\n        formDataObj = Object.fromEntries(formData.entries());\r\n\r\n      const formResult = getFormValue(formDataObj, schema);\r\n      onSubmit && onSubmit(formResult);\r\n    },\r\n    [onSubmit, schema]\r\n  );\r\n\r\n  return schema.length ? (\r\n    <Form onSubmit={onSubmitForm} className={`${className} text-left`}>\r\n      {schema.map((item: FormControlType) => (\r\n        <FormControlParser formControlItem={item} key={`parser-${item.id}`} />\r\n      ))}\r\n      <Button variant=\"success\" type=\"submit\">\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  ) : (\r\n    <h3 className=\"text-center\">This form is empty</h3>\r\n  );\r\n};\r\n\r\nexport default FormGenerator;\r\n","import { FC, useContext } from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport { Tooltip } from \"../../components\";\r\nimport { Download, Save } from \"../../shared/icons\";\r\nimport { FormBuilderContext } from \"../../shared/types\";\r\nimport ToolboxList from \"./ToolboxList\";\r\n\r\nconst Toolbox: FC = () => {\r\n  const { schema, setSchema, onSave } = useContext(FormBuilderContext);\r\n\r\n  const downloadTemplate = () => {\r\n    const element = document.createElement(\"a\");\r\n    const textFile = new Blob([JSON.stringify(schema)], { type: \"text/json\" });\r\n    element.href = URL.createObjectURL(textFile);\r\n    element.download = \"formTemplates.json\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {schema.length && (\r\n        <Row className=\"justify-content-between mb-3\">\r\n          <Col xs={4} lg={6}>\r\n            <h1>Edit</h1>\r\n          </Col>\r\n          <Col xs={4} lg={3} className=\"d-flex align-items-center justify-content-end\">\r\n            <Tooltip text=\"Download template\">\r\n              <Button variant=\"outline-info\" className=\"btn-control\" onClick={downloadTemplate}>\r\n                <Download height=\"100%\" />\r\n              </Button>\r\n            </Tooltip>\r\n          </Col>\r\n          <Col xs={4} lg={3} className=\"d-flex align-items-center justify-content-end\">\r\n            <Tooltip text=\"Save template\">\r\n              <Button variant=\"outline-info\" className=\"btn-control\" onClick={onSave}>\r\n                <Save height=\"100%\" />\r\n              </Button>\r\n            </Tooltip>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      <ToolboxList schema={schema} editSchema={setSchema} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Toolbox;\r\n","import { FC, useState } from \"react\";\r\nimport { Card, Col, Row } from \"react-bootstrap\";\r\nimport FormBuilderContext from \"../../shared/types/FormBuilderContext\";\r\nimport { FormControlType } from \"../../shared/types/FormControlType\";\r\nimport FormGenerator from \"../FormGenerator\";\r\nimport Toolbox from \"../Toolbox\";\r\n\r\nconst FormBuilder: FC<{ schema?: FormControlType[]; onSave?: (schema: FormControlType[]) => void }> = ({\r\n  schema = [],\r\n  onSave\r\n}) => {\r\n  const [formSchema, setFormSchema] = useState<FormControlType[]>(schema);\r\n\r\n  const onSaveTemplate = () => onSave && onSave(formSchema);\r\n\r\n  return (\r\n    <FormBuilderContext.Provider value={{ schema: formSchema, setSchema: setFormSchema, onSave: onSaveTemplate }}>\r\n      <Row className=\"my-5 text-left\">\r\n        <Col md={4}>\r\n          <Toolbox />\r\n        </Col>\r\n        <Col md={8}>\r\n          <Card body>\r\n            <FormGenerator schema={formSchema} />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </FormBuilderContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FormBuilder;\r\n","import { FC, useState } from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport { FormGenerator } from \"../containers\";\r\nimport { FormControlType } from \"../shared/types\";\r\nimport { parseTemplate } from \"../shared/utils\";\r\n\r\nconst FormGeneratorSample: FC = () => {\r\n  const [schema, setSchema] = useState<FormControlType[]>([]);\r\n\r\n  const onUpload = () => {\r\n    const fileInput = document.createElement(\"input\");\r\n    fileInput.type = \"file\";\r\n    fileInput.style.display = \"none\";\r\n    fileInput.onchange = (e: any) => {\r\n      const file = e.target.files[0];\r\n      if (!file) {\r\n        return;\r\n      }\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = (event: any) => {\r\n        var contents = event.target.result;\r\n        const formSchema = parseTemplate(contents);\r\n        formSchema?.length ? setSchema(formSchema) : alert(\"Please choose correct template!\");\r\n        document.body.removeChild(fileInput);\r\n      };\r\n      reader.readAsText(file);\r\n    };\r\n    document.body.appendChild(fileInput);\r\n    fileInput.click();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"mb-4\">\r\n        <Col md={10}>\r\n          <h2>Form Generator</h2>\r\n        </Col>\r\n        <Col md={2}>\r\n          <Button variant=\"outline-success\" onClick={onUpload} className=\"w-100\">\r\n            Upload Template\r\n          </Button>\r\n        </Col>\r\n\r\n        <Col md={12} className=\"text-center\">\r\n          <hr />\r\n          <i> (Download form template from Form Builder and upload to test) </i>\r\n          <hr />\r\n        </Col>\r\n      </Row>\r\n      <FormGenerator\r\n        schema={schema}\r\n        className=\"my-4\"\r\n        onSubmit={(result: object) =>\r\n          alert(\r\n            \"Thank for your submission! The result is:\\n\" +\r\n              (result as any[]).map((r) => r.question + \": \" + r.answer).join(\"\\n\")\r\n          )\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormGeneratorSample;\r\n","import { FormBuilder } from \"../containers\";\r\nimport { useState } from \"react\";\r\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\r\nimport { ControlType, FormControlType, InputFieldType } from \"../shared/types\";\r\nimport FormGeneratorSample from \"./FormGeneratorSample\";\r\n\r\nconst Sample = () => {\r\n  const [isFormBuilder, toggleShowFormBuilder] = useState(true);\r\n\r\n  const data: FormControlType[] = [\r\n    {\r\n      controlType: ControlType.Input,\r\n      defaultValue: \"\",\r\n      disabled: false,\r\n      label: \"Input Field\",\r\n      placeholder: \"Placeholder\",\r\n      id: \"d9d4e1b9-8760-4aaa-81be-041333cbf0e3\"\r\n    },\r\n    {\r\n      controlType: ControlType.Section,\r\n      children: [\r\n        {\r\n          controlType: ControlType.Checkbox,\r\n          defaultValue: \"\",\r\n          disabled: false,\r\n          label: \"Checkbox Field\",\r\n          placeholder: \"\",\r\n          id: \"166836d1-14f2-4a9e-99e4-2acb16bc10aa\",\r\n          values: [\"One\", \"Two\", \"Three\"]\r\n        },\r\n        {\r\n          controlType: ControlType.Radio,\r\n          values: [\"One\", \"Two\", \"Three\"],\r\n          disabled: false,\r\n          label: \"Radio Field\",\r\n          id: \"38771b38-86b8-474a-8251-b94268df81e6\"\r\n        },\r\n        {\r\n          controlType: ControlType.TextArea,\r\n          value: \"\",\r\n          values: [],\r\n          disabled: false,\r\n          label: \"Area Field\",\r\n          id: \"4e6ad7ab-d286-4504-890f-e4ca56ec6c39\",\r\n          defaultValue: \"Hello world!\"\r\n        },\r\n        {\r\n          controlType: ControlType.Select,\r\n          values: [\"One\", \"Two\", \"Three\"],\r\n          disabled: false,\r\n          label: \"Select Field\",\r\n          id: \"b5027731-e808-47c2-a7d1-871cac6c9fc4\"\r\n        }\r\n      ],\r\n      label: \"Section\",\r\n      bordered: false,\r\n      id: \"9d13cfe5-e145-4d74-b73f-993004fbc8e4\",\r\n      columns: 2\r\n    },\r\n    {\r\n      controlType: ControlType.Section,\r\n      children: [\r\n        {\r\n          controlType: ControlType.Input,\r\n          defaultValue: \"\",\r\n          disabled: false,\r\n          label: \"Datetime\",\r\n          placeholder: \"\",\r\n          id: \"e306440b-2864-4561-b514-3b02173b2dbf\",\r\n          type: InputFieldType.datetime\r\n        },\r\n        {\r\n          controlType: ControlType.Input,\r\n          defaultValue: \"\",\r\n          disabled: false,\r\n          label: \"Date\",\r\n          placeholder: \"\",\r\n          id: \"40e9107e-b0ea-4193-aef9-952e9def8f1b\",\r\n          type: InputFieldType.date\r\n        },\r\n        {\r\n          controlType: ControlType.Input,\r\n          defaultValue: \"\",\r\n          disabled: false,\r\n          label: \"Time\",\r\n          placeholder: \"\",\r\n          id: \"fafeb28f-a1f0-4cc7-acdf-a7ad798477af\",\r\n          type: InputFieldType.time\r\n        },\r\n        {\r\n          controlType: ControlType.Input,\r\n          defaultValue: \"dongntuyen\",\r\n          disabled: false,\r\n          label: \"Secure\",\r\n          placeholder: \"Password\",\r\n          id: \"e9befa72-bb25-4920-8f73-1868a9c9752b\",\r\n          type: InputFieldType.password\r\n        },\r\n        {\r\n          controlType: ControlType.Input,\r\n          defaultValue: \"111\",\r\n          disabled: true,\r\n          label: \"Number\",\r\n          placeholder: \"\",\r\n          id: \"baf7756f-a9e2-4fa3-9635-66fae54634cd\",\r\n          type: InputFieldType.number\r\n        }\r\n      ],\r\n      label: \"Section with Border\",\r\n      bordered: true,\r\n      id: \"726b4e49-d176-4297-83ca-0be026a66980\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md={6}>\r\n          <h1 className=\"text-center my-3\"> Demo Form Machine </h1>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md={6}>\r\n          <Button size=\"lg\" onClick={() => toggleShowFormBuilder(!isFormBuilder)} className=\"w-100 my-3\">\r\n            Show {isFormBuilder ? \"Form Generator\" : \"Form Builder\"}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      {isFormBuilder ? (\r\n        <FormBuilder\r\n          schema={data}\r\n          onSave={(template: object) => {\r\n            alert(\"Templates was saved! Check console!\");\r\n            console.log(template);\r\n          }}\r\n        />\r\n      ) : (\r\n        <FormGeneratorSample />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Sample;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Sample from \"./samples/Sample\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Sample />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nexport { FormGenerator, FormBuilder } from \"./containers\";\r\nexport type { FormControlType, ControlType } from \"./shared/types/FormControlType\";\r\nexport { parseTemplate } from \"./shared/utils\";\r\n"],"sourceRoot":""}